#!/usr/bin/env python3
#
# sk_lexer.py -- oscript ("skeleton") file lexer
#
import sys, os
from argparse import ArgumentParser

from oscript.parse import sk_lexer

from g2base import ssdlog


def printTokens(tokens):
    for token in tokens:
        print(token)


def main(options, args):

    # Create top level logger.
    logger = ssdlog.make_logger('sk_lexer', options)

    # Create the scanner
    scanner = sk_lexer.skScanner(logger=logger)

    if len(args) > 0:
        for filename in args:
            try:
                res = scanner.scan_skfile(filename)

                if res.errors > 0:
                    for errbnch in res.errinfo:
                        print(errbnch.verbose)
                        print("")

                elif (res.tokens != None) and options.verbose:
                    printTokens(res.tokens)

                print("%s: %d errors" % (filename, res.errors))

            except sk_lexer.skScanError as e:
                # Print error message and continue to next file
                print(str(e))

    else:
        buf = sys.stdin.read()
        try:
            res = scanner.scan_skbuf(buf)

            if res.errors > 0:
                for errbnch in res.errinfo:
                    print(errbnch.verbose)
                    print("")

            elif (res.tokens != None) and options.verbose:
                printTokens(res.tokens)

                print("%d errors" % (res.errors))

        except sk_lexer.skScanError as e:
            # Print error message
            print(str(e))


if __name__ == '__main__':
    # Parse command line options
    argprs = ArgumentParser(description="oscript (skeleton) file lexer")

    argprs.add_argument("-v", "--verbose", dest="verbose", default=False,
                        action="store_true",
                        help="Turn on verbose output")
    ssdlog.addlogopts(argprs)

    options, args = argprs.parse_known_args(sys.argv[1:])

    main(options, args)
