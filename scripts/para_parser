#!/usr/bin/env python3
#
# para_parser -- SOSS PARA file parser
#
import sys
import pprint
from argparse import ArgumentParser

from g2base import ssdlog

from oscript.parse import para_lexer, para_parser


def main(options, args):

    # Create top level logger.
    logger = ssdlog.make_logger('para_parser', options)

    lexer = para_lexer.paraScanner(logger=logger)

    parser = para_parser.paraParser(lexer, logger=logger)

    if len(args) > 0:
        for filename in args:
            try:
                res = parser.parse_file(filename)

                if (res.errors == 0) and options.verbose:
                    pprint.pprint(res.paramList)
                    pprint.pprint(res.paramDict)

                print("%s: %d errors" % (filename, res.errors))

            except para_parser.paraParseError as e:
                # Print error message and continue to next file
                print(str(e))

    else:
        buf = sys.stdin.read()
        try:
            res = parser.parse_buf(buf)

            if (res.errors == 0) and options.verbose:
                pprint.pprint(res.paramList)
                pprint.pprint(res.paramDict)

                print("%d errors" % (res.errors))

        except para_parser.paraParseError as e:
            # Print error message
            print(str(e))


if __name__ == '__main__':
    # Parse command line options
    argprs = ArgumentParser(description="SOSS PARA file lexer")

    argprs.add_argument("-v", "--verbose", dest="verbose", default=False,
                        action="store_true",
                        help="Turn on verbose output")
    ssdlog.addlogopts(argprs)

    options, args = argprs.parse_known_args(sys.argv[1:])

    main(options, args)
