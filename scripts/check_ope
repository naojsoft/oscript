#!/usr/bin/env python3
#
# check_ope -- utility to check legacy OPE (observation) files
#
# E. Jeschke
#
import sys, os
from argparse import ArgumentParser

import oscript.parse.ope as ope


def get_similar(varref, vardict, choppct=0.85):
    length = int(len(varref) * choppct)
    varref = varref[:length]
    varlist = [k for k in list(vardict.keys()) if k.startswith(varref)]
    varlist.sort()
    return varlist

def remove_ignores(varref_list, ignorelist):
    return [k for k in varref_list if k.upper() not in ignorelist]

def main(options, args):

    # Set up list of paths of include directories for PRM files, etc.
    if options.prmpath != None:
        # 1st priority--user specified on command line
        include_dirs = options.prmpath.split(':')

    elif 'PRMPATH' in os.environ:
        # 2nd priority--user has defined an environment variable
        include_dirs = os.environ['PRMPATH'].split(':')

    else:
        # 3rd priority--construct a default set:
        #  $HOME/Procedure:$HOME/Procedure/COMMON:$HOME/Procedure/<insname>
        home = os.path.join(os.environ['HOME'], 'Procedure')
        include_dirs = [
            home,
            os.path.join(home, 'COMMON'),
            ]
        if options.instrument:
            insname = options.instrument.upper()
            include_dirs.append(os.path.join(home, insname))


    # Iterate through the arguments, which are expected to be OPE
    # files and check them
    status = 0
    ignorelist = [s.upper() for s in options.ignore.split(',')]

    for opefile in args:
        print("====================================================")
        print(" OPE file: %s" % opefile)
        print("")

        with open(opefile, 'r') as in_f:
            buf = in_f.read()

        try:
            res = ope.check_ope(buf, include_dirs=include_dirs)

            if len(res.badcoords) > 0:
                for bnch in res.badcoords:
                    print("Line %4d: warning: %s" % (
                        bnch.lineno, bnch.errstr))
                    print("  --> %s" % (bnch.text))
                status = 1

            bads = remove_ignores(res.badset, ignorelist)
            if len(bads) > 0:

                print("Undefined variable references in OPE file: %s" % (
                    ', '.join(bads)))
                for bnch in res.badlist:
                    if bnch.varref.upper() not in bads:
                        continue
                    print("Line %4d: $%s" % (bnch.lineno, bnch.varref))
                    print("  --> %s" % (bnch.text))
                    similar = get_similar(bnch.varref, res.vardict,
                                          choppct=options.choppct)
                    print("Similar vars: %s" % (similar))

                status = 1

            if status == 0:
                print("Congratulations, the file looks good.")

        except Exception as e:
            print("Error trying to parse OPE file: %s" % str(e))
            print("")
            print("Please check the OPE structure:")
            print("see http://wiki.subaru.nao.ac.jp/wiki/OPE_File_Format")
            print("for details.")
            status = 1

    sys.exit(status)


if __name__ == '__main__':

    argprs = ArgumentParser(description="Check OPE files for errors")
    argprs.add_argument("--chop", dest="choppct", metavar="PCT",
                        type=float, default=0.85,
                        help="Specify PCT for similar variable comparisons")
    argprs.add_argument("-p", "--prmpath", dest="prmpath", metavar="PATH",
                        help="Specify colon-separated PATH for PRM lookups")
    argprs.add_argument("-i", "--inst", dest="instrument", metavar="NAME",
                        help="Specify instrument NAME for PRM lookups")
    argprs.add_argument("--ignore", dest="ignore", metavar="VARLIST",
                        default='',
                        help="Comma-separated list of bad variables to ignore")

    (options, args) = argprs.parse_known_args(sys.argv[1:])

    main(options, args)
